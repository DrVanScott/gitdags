%% 
%% Copyright (C) 2014 by Julien Cretel <jubobs.tex at gmail.com>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%% 
%%     http://www.latex-project.org/lppl.txt
%% 
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%% 
%% This work has the LPPL maintenance status `maintained'.
%% 
%% The Current Maintainer of this work is Julien Cretel.
%% 
%% This work currently consists of the file gitdags.sty.
%% 
\NeedsTeXFormat{LaTeX2e}[2011/06/27]
\ProvidesClass{gitdags}
  [2014/08/28 v0.1 A package for drawing educational Git history graphs]

\DeclareOption*{\PassOptionsToPackage{\CurrentOption}{tikz}}
\ProcessOptions\relax

\RequirePackage{xcolor-solarized}
\RequirePackage{tikz}
\usetikzlibrary{
  arrows.meta,
  graphs,
  positioning,
  shadows,
  shapes,
}

\tikzset{reset preaction/.code={\def\tikz@preactions{}}}

% --- repository history graphs ---
% style definitions
\tikzset{
  gitdags node/.style={
    draw,
    node distance = 1.4em,
    drop shadow   = {opacity=0.15},
    font          = \fontfamily{lmtt}\selectfont\small,
  },
  DAGref/.style={
    gitdags node,
    shape          = rectangle,
    minimum height = 1.4em,
    draw           = solarized-base01,
    thick,
    font           = \fontfamily{lmtt}\selectfont\scriptsize,
  },
  DAGedge/.style={
    semithick,
    Latex-,
    draw = gray,
  },
  DAGrefedge/.style={
    DAGedge,
    thick,
    densely dotted,
  },
  DAGcommit/.style={
    gitdags node,
    shape                        = rounded rectangle,
    rounded rectangle arc length = 90,
    minimum height               = 1.6em,
    minimum width                = 2em,
    draw                         = solarized-base01,
    fill                         = solarized-green!20,
    very thick,
  },
  graphs/DAG/.style={
    nodes          = DAGcommit,
    edges          = DAGedge,
    branch down    = 3em,
    grow right sep = 1.5em,
  },
  gitstates/.style={
    gitdags node,
    shape           = rectangle,
    rounded corners = .5em,
    minimum width   = 7em,
    minimum height  = 3em,
    text opacity    = 0.75,
    semithick,
  },
  gitSA/.style={
    gitstates,
    anchor = north west,
    xshift = 1em,
    yshift = -1em,
    draw   = solarized-orange,
    fill   = solarized-orange!5,
    text   = solarized-orange,
  },
  gitWT/.style={
    gitstates,
    node distance = .6em,
    draw          = solarized-violet,
    fill          = solarized-violet!5,
    text          = solarized-violet,
  },
  resetarrows/.style={
    -Stealth,
    dashed,
    thick,
    draw         = solarized-base02,
    draw opacity = .75,
  },
  highlightedcommit/.style={
    DAGcommit,
    fill opacity = 0,
    draw         = solarized-base02,
    reset preaction,
  },
}

% directed acyclic graph
\newcommand\DAG[1][]{\graph[DAG,#1]}

% local-branch reference
\newcommand{\branch}[3][]{%
  \node[
    DAGref,
    fill = yellow!30,
  ] (#2) [#1] {#2};
  \draw[DAGrefedge] (#3) -- (#2);
}

% remote-branch reference
\newcommand{\remotebranch}[3][]{%
  \node[
    DAGref,
    fill = solarized-blue!20,
  ] (#2) [#1] {#2};
  \draw[DAGrefedge] (#3) -- (#2);
}

% HEAD symbolic reference
\newcommand{\HEAD}[2][]{%
  \node[
    DAGref,
    fill          = solarized-red!20,
    node distance = 1em,
  ] (HEAD) [#1] {HEAD};
  \draw[DAGrefedge] (#2) -- (HEAD);
}

% remote-branch reference
\newcommand{\tag}[3][]{%
  \node[
    DAGref,
    fill = solarized-violet!20,
  ] (#2) [#1] {#2};
  \draw[DAGrefedge] (#3) -- (#2);
}

% staging area and worktree
\newcommand\SAandWT{%
  \node[gitSA] (sa) at (current bounding box.south east) {staging area};
  \node[gitWT,below=of sa] (wt) {working tree};
}

% arrows pointing from a commit to the staging area or working tree
\newcommand\toSAorWT[3][]{%
  \node[highlightedcommit] at (#2) {\phantom{#2}};
  \draw[resetarrows] (#2.south) to[out=290, in=170]
    ([xshift=1em,yshift=-1em]#3.north west);
}

\newcommand\toSAfrom[2][]{\toSAorWT[#1]{#2}{sa}}
\newcommand\toWTfrom[2][]{\toSAorWT[#1]{#2}{wt}}

\endinput
